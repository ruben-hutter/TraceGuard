\begin{thebibliography}{11}
\providecommand{\natexlab}[1]{#1}
\providecommand{\url}[1]{\texttt{#1}}
\expandafter\ifx\csname urlstyle\endcsname\relax
  \providecommand{\doi}[1]{doi: #1}\else
  \providecommand{\doi}{doi: \begingroup \urlstyle{rm}\Url}\fi

\bibitem[Avgerinos et~al.(2014)Avgerinos, Rebert, Cha, and
  Brumley]{avgerinos_enhancing_2014}
Thanassis Avgerinos, Alexandre Rebert, Sang~Kil Cha, and David Brumley.
\newblock Enhancing symbolic execution with veritesting.
\newblock In \emph{Proceedings of the 36th International Conference on Software
  Engineering}, pages 1083--1094. ACM, 2014.

\bibitem[Cadar et~al.(2008)Cadar, Dunbar, and Engler]{cadar_klee_2008}
Cristian Cadar, Daniel Dunbar, and Dawson Engler.
\newblock {KLEE}: Unassisted and automatic generation of high-coverage tests
  for complex systems programs.
\newblock In \emph{8th USENIX Symposium on Operating Systems Design and
  Implementation}, pages 209--224. USENIX Association, 2008.

\bibitem[Clarke et~al.(2003)Clarke, Kroening, and
  Yorav]{clarke_behavioral_2003}
Edmund Clarke, Daniel Kroening, and Karen Yorav.
\newblock Behavioral consistency of {C} and {Verilog} programs using bounded
  model checking.
\newblock In \emph{Proceedings of the 40th Annual Design Automation
  Conference}, pages 368--371. ACM, 2003.

\bibitem[Kuznetsov et~al.(2012)Kuznetsov, Kinder, Bucur, and
  Candea]{kuznetsov_efficient_2012}
Vitaly Kuznetsov, Johannes Kinder, Stefan Bucur, and George Candea.
\newblock Efficient state merging in symbolic execution.
\newblock In \emph{Proceedings of the 33rd ACM SIGPLAN Conference on
  Programming Language Design and Implementation}, PLDI '12, pages 193--204.
  ACM, 2012.

\bibitem[Ming et~al.(2015)Ming, Wu, Wang, Xing, and Liu]{ming_taintpipe_2015}
Jiang Ming, Dinghao Wu, Jun Wang, Xinyu Xing, and Zhiqiang Liu.
\newblock {TaintPipe}: Pipelined symbolic taint analysis.
\newblock In \emph{24th USENIX Security Symposium}, pages 65--80. USENIX
  Association, 2015.

\bibitem[Ognawala et~al.(2016)Ognawala, Ochoa, Pretschner, and
  Limmer]{ognawala_macke_2016}
Saahil Ognawala, Martín Ochoa, Alexander Pretschner, and Tobias Limmer.
\newblock {MACKE}: Compositional analysis of low-level vulnerabilities with
  symbolic execution.
\newblock In \emph{Proceedings of the 31st Annual ACM Symposium on Applied
  Computing}, SAC '16, pages 1623--1628. ACM, 2016.

\bibitem[Poeplau and Francillon(2020)]{poeplau_symbolic_2020}
Sebastian Poeplau and Aurélien Francillon.
\newblock Symbolic execution with {SymCC}: Don't interpret, compile!
\newblock In \emph{29th USENIX Security Symposium}, pages 181--198. USENIX
  Association, 2020.

\bibitem[Schwartz et~al.(2010)Schwartz, Avgerinos, and
  Brumley]{schwartz_all_2010}
Edward~J. Schwartz, Thanassis Avgerinos, and David Brumley.
\newblock All you ever wanted to know about dynamic taint analysis and forward
  symbolic execution (but might have been afraid to ask).
\newblock In \emph{2010 IEEE Symposium on Security and Privacy}, pages
  317--331. IEEE, 2010.
\newblock \doi{10.1109/SP.2010.26}.

\bibitem[Shoshitaishvili et~al.(2016)Shoshitaishvili, Wang, Salls, Stephens,
  Polino, Dutcher, Grosen, Feng, Hauser, Kruegel, and
  Vigna]{shoshitaishvili_sok_2016}
Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario
  Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser,
  Christopher Kruegel, and Giovanni Vigna.
\newblock {SoK}: (state of) the art of war: Offensive techniques in binary
  analysis.
\newblock In \emph{IEEE Symposium on Security and Privacy}, pages 138--153.
  IEEE, 2016.

\bibitem[Springer and Feng(2018)]{springer_teaching_2018}
Jake Springer and Siji Feng.
\newblock Teaching with angr: A symbolic execution curriculum and {CTF}.
\newblock In \emph{2018 IEEE/ACM 1st International Workshop on Automated
  Software Engineering Education}, pages 13--20. IEEE, 2018.

\bibitem[Visser et~al.(2003)Visser, Havelund, Brat, Park, and
  Lerda]{visser_model_2003}
Willem Visser, Klaus Havelund, Guillaume Brat, SeungJoon Park, and Flavio
  Lerda.
\newblock Model checking programs.
\newblock In \emph{Automated Software Engineering}, pages 3--12. IEEE, 2003.

\end{thebibliography}
