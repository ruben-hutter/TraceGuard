% FOUNDATIONAL SYMBOLIC EXECUTION PAPERS

% Main symbolic execution survey - highly authoritative
@article{baldoni_survey_2018,
	title = {A Survey of Symbolic Execution Techniques},
	journal = {ACM Computing Surveys},
	author = {Baldoni, Roberto and Coppa, Emilio and D'elia, Daniele Cono and Demetrescu, Camil and Finocchi, Irene},
	year = {2018},
	volume = {51},
	number = {3},
	pages = {50:1--50:39},
	doi = {10.1145/3182657}
}

% Original symbolic execution paper
@article{king_symbolic_1976,
	title = {Symbolic Execution and Program Testing},
	journal = {Communications of the ACM},
	author = {King, James C.},
	year = {1976},
	volume = {19},
	number = {7},
	pages = {385--394},
	doi = {10.1145/360248.360252}
}

% Classic overview paper - very well cited
@inproceedings{schwartz_all_2010,
	title = {All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (But Might Have Been Afraid to Ask)},
	booktitle = {2010 IEEE Symposium on Security and Privacy},
	publisher = {IEEE},
	author = {Schwartz, Edward J. and Avgerinos, Thanassis and Brumley, David},
	year = {2010},
	pages = {317--331},
	doi = {10.1109/SP.2010.26}
}

% SYMBOLIC EXECUTION FRAMEWORKS

% KLEE - most prominent tool
@inproceedings{cadar_klee_2008,
	title = {{KLEE}: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs},
	booktitle = {8th USENIX Symposium on Operating Systems Design and Implementation},
	publisher = {USENIX Association},
	author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
	year = {2008},
	pages = {209--224}
}

% Java PathFinder
@inproceedings{visser_model_2003,
	title = {Model Checking Programs},
	booktitle = {Automated Software Engineering},
	publisher = {IEEE},
	author = {Visser, Willem and Havelund, Klaus and Brat, Guillaume and Park, SeungJoon and Lerda, Flavio},
	year = {2003},
	pages = {3--12}
}

% CBMC bounded model checker
@inproceedings{clarke_behavioral_2003,
	title = {Behavioral Consistency of {C} and {Verilog} Programs Using Bounded Model Checking},
	booktitle = {Proceedings of the 40th Annual Design Automation Conference},
	publisher = {ACM},
	author = {Clarke, Edmund and Kroening, Daniel and Yorav, Karen},
	year = {2003},
	pages = {368--371}
}

% OPTIMIZATION TECHNIQUES

% State merging optimization
@inproceedings{kuznetsov_efficient_2012,
	title = {Efficient State Merging in Symbolic Execution},
	booktitle = {Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation},
	publisher = {ACM},
	author = {Kuznetsov, Vitaly and Kinder, Johannes and Bucur, Stefan and Candea, George},
	year = {2012},
	pages = {193--204},
	series = {PLDI '12}
}

% State merging with quantifiers - recent optimization
@inproceedings{trabish_state_2023,
	title = {State Merging with Quantifiers in Symbolic Execution},
	booktitle = {Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	publisher = {ACM},
	author = {Trabish, David and Rinetzky, Noam and Shoham, Sharon and Sharma, Vaibhav},
	year = {2023},
	pages = {1254--1266},
	series = {ESEC/FSE 2023}
}

% Veritesting approach
@inproceedings{avgerinos_enhancing_2014,
	title = {Enhancing Symbolic Execution with Veritesting},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	publisher = {ACM},
	author = {Avgerinos, Thanassis and Rebert, Alexandre and Cha, Sang Kil and Brumley, David},
	year = {2014},
	pages = {1083--1094}
}

% Compilation-based symbolic execution
@inproceedings{poeplau_symbolic_2020,
	title = {Symbolic Execution with {SymCC}: Don't Interpret, Compile!},
	booktitle = {29th USENIX Security Symposium},
	publisher = {USENIX Association},
	author = {Poeplau, Sebastian and Francillon, Aurélien},
	year = {2020},
	pages = {181--198}
}

% Machine learning approach to compiler optimization for symbolic execution
@inproceedings{huang_leo_2018,
	title = {Learning to Accelerate Symbolic Execution via Code Transformation},
	booktitle = {Proceedings of the 2018 Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	publisher = {ACM},
	author = {Huang, Heqing and Yao, Peisen and Wu, Rongxin and Shi, Qingkai and Zhang, Charles},
	year = {2018},
	pages = {906--909}
}

% Recent compiler optimization impact study
@inproceedings{chen_compiler_2024,
	title = {When Compiler Optimizations Meet Symbolic Execution: An Empirical Study},
	booktitle = {Proceedings of the 2024 ACM SIGSAC Conference on Computer and Communications Security},
	publisher = {ACM},
	author = {Chen, Hongxu and Liu, Yinxing and Li, Yuekang and Chen, Bihuan and Xie, Xiaofei and Wu, Xiuheng and Liu, Yang},
	year = {2024},
	pages = {421--435}
}

% TAINT ANALYSIS

% Pipelined taint analysis integration
@inproceedings{ming_taintpipe_2015,
	title = {{TaintPipe}: Pipelined Symbolic Taint Analysis},
	booktitle = {24th USENIX Security Symposium},
	publisher = {USENIX Association},
	author = {Ming, Jiang and Wu, Dinghao and Wang, Jun and Xing, Xinyu and Liu, Zhiqiang},
	year = {2015},
	pages = {65--80}
}

% Classic taint analysis paper
@inproceedings{newsome_dynamic_2005,
	title = {Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software},
	booktitle = {Network and Distributed System Security Symposium},
	publisher = {Internet Society},
	author = {Newsome, James and Song, Dawn},
	year = {2005}
}

% Recent compositional taint analysis
@inproceedings{banerjee_compositional_2023,
	title = {Compositional Taint Analysis for Enforcing Security Policies at Scale},
	booktitle = {Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	publisher = {ACM},
	author = {Banerjee, Subarno and Cui, Siwei and Emmi, Michael and Filieri, Antonio and Hadarean, Liana and Li, Peixuan and Luo, Linghui and Piskachev, Goran and Rosner, Nico and Sengupta, Aritra and Tripp, Omer and Wang, Jingbo},
	year = {2023},
	pages = {1598--1610},
	series = {ESEC/FSE 2023}
}

% Static program analysis assisted dynamic taint tracking
@article{xu_static_2012,
	title = {Static Program Analysis Assisted Dynamic Taint Tracking for Software Vulnerability Discovery},
	journal = {Computers \& Security},
	author = {Xu, Wei and Bhatkar, Sandeep and Sekar, R.},
	year = {2012},
	volume = {31},
	number = {4},
	pages = {469--482},
	doi = {10.1016/j.cose.2012.02.001}
}

% Exploitability assessment using taint-guided exploration
@article{wang_tunter_2023,
	title = {Tunter: Assessing Exploitability of Vulnerabilities with Taint-Guided Exploitable States Exploration},
	journal = {Computers \& Security},
	author = {Wang, Ruipeng and Chen, Kaixiang and Jia, Yueming and Wang, Yinzhi and Zhang, Kehuan},
	year = {2023},
	volume = {124},
	pages = {102942},
	doi = {10.1016/j.cose.2022.102942}
}

% ANGR FRAMEWORK

% Main angr paper - SoK overview
@inproceedings{shoshitaishvili_sok_2016,
	title = {{SoK}: (State of) The Art of War: Offensive Techniques in Binary Analysis},
	booktitle = {IEEE Symposium on Security and Privacy},
	publisher = {IEEE},
	author = {Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and Stephens, Nick and Polino, Mario and Dutcher, Audrey and Grosen, John and Feng, Siji and Hauser, Christophe and Kruegel, Christopher and Vigna, Giovanni},
	year = {2016},
	pages = {138--153}
}

% Angr educational paper
@inproceedings{springer_teaching_2018,
	title = {Teaching with Angr: A Symbolic Execution Curriculum and {CTF}},
	booktitle = {2018 IEEE/ACM 1st International Workshop on Automated Software Engineering Education},
	publisher = {IEEE},
	author = {Springer, Jake and Feng, Siji},
	year = {2018},
	pages = {13--20}
}

% HYBRID APPROACHES

% Driller - combines fuzzing and symbolic execution
@inproceedings{stephens_driller_2016,
	title = {Driller: Augmenting Fuzzing Through Selective Symbolic Execution},
	booktitle = {Network and Distributed System Security Symposium},
	publisher = {Internet Society},
	author = {Stephens, Nick and Grosen, John and Salls, Christopher and Dutcher, Audrey and Wang, Ruoyu and Corbetta, Jacopo and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
	year = {2016}
}

% QSYM - practical concolic execution for hybrid fuzzing
@inproceedings{yun_qsym_2018,
	title = {{QSYM}: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing},
	booktitle = {27th USENIX Security Symposium},
	publisher = {USENIX Association},
	author = {Yun, Insu and Lee, Sangho and Xu, Meng and Jang, Yeongjin and Paek, Taesoo},
	year = {2018},
	pages = {745--761}
}

% SAVIOR - bug-driven hybrid testing
@inproceedings{chen_savior_2020,
	title = {{SAVIOR}: Towards Bug-Driven Hybrid Testing},
	booktitle = {2020 IEEE Symposium on Security and Privacy},
	publisher = {IEEE},
	author = {Chen, Yaohui and Li, Peng and Xu, Jun and Guo, Shengjian and Zhou, Rundong and Zhang, Yulong and Wei, Tao and Lu, Long},
	year = {2020},
	pages = {1580--1596}
}

% Recent hybrid fuzzing survey
@inproceedings{li_survey_2020,
	title = {A Survey of Hybrid Fuzzing based on Symbolic Execution},
	booktitle = {Proceedings of the 2020 International Conference on Cyberspace Innovation of Advanced Technologies},
	publisher = {ACM},
	author = {Li, Peng and Chen, Yaohui and Xu, Jun and Zhou, Rundong},
	year = {2020},
	pages = {424--431}
}

% PATH PRIORITIZATION STRATEGIES

% Coverage-guided techniques
@inproceedings{bohme_coverage_2016,
	title = {Coverage-based Greybox Fuzzing as Markov Chain},
	booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
	publisher = {ACM},
	author = {Böhme, Marcel and Pham, Van-Thuan and Roychoudhury, Abhik},
	year = {2016},
	pages = {1032--1043}
}

% Directed fuzzing approach
@inproceedings{bohme_directed_2017,
	title = {Directed Greybox Fuzzing},
	booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
	publisher = {ACM},
	author = {Böhme, Marcel and Pham, Van-Thuan and Nguyen, Manh-Dung and Roychoudhury, Abhik},
	year = {2017},
	pages = {2329--2344}
}

% SECURITY-FOCUSED ANALYSIS

% SeaHorn verification framework
@inproceedings{gurfinkel_seahorn_2015,
	title = {The {SeaHorn} Verification Framework},
	booktitle = {Computer Aided Verification},
	publisher = {Springer},
	author = {Gurfinkel, Arie and Kahsai, Temesghen and Komuravelli, Anvesh and Navas, Jorge A.},
	year = {2015},
	pages = {343--361}
}

% SMACK LLVM-based verifier
@inproceedings{rakamaric_smack_2014,
	title = {{SMACK}: Decoupling Source Language Details from Verifier Implementations},
	booktitle = {Computer Aided Verification},
	publisher = {Springer},
	author = {Rakamarić, Zvonimir and Emmi, Michael},
	year = {2014},
	pages = {106--113}
}

% RECENT ADVANCES (2023-2024)

% SymQEMU - compilation-based symbolic execution
@inproceedings{poeplau_symqemu_2021,
	title = {{SymQEMU}: Compilation-based Symbolic Execution for Binaries},
	booktitle = {Network and Distributed System Security Symposium},
	publisher = {Internet Society},
	author = {Poeplau, Sebastian and Francillon, Aurélien},
	year = {2021}
}

% Machine learning for fuzzing optimization
@inproceedings{rajpal_learning_2017,
	title = {Not All Bytes are Equal: Neural Byte Sieve for Fuzzing},
	booktitle = {arXiv preprint arXiv:1711.04596},
	author = {Rajpal, Mohit and Blum, William and Singh, Rishabh},
	year = {2017}
}

% COMPOSITIONAL ANALYSIS

% MACKE - compositional analysis with symbolic execution
@inproceedings{ognawala_macke_2016,
	title = {{MACKE}: Compositional Analysis of Low-Level Vulnerabilities with Symbolic Execution},
	booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
	publisher = {ACM},
	author = {Ognawala, Saahil and Ochoa, Martín and Pretschner, Alexander and Limmer, Tobias},
	year = {2016},
	pages = {1623--1628},
	series = {SAC '16}
}

% ONLINE RESOURCES (keep minimal)

% Angr documentation - general reference
@misc{angr_documentation,
	title = {Angr Documentation},
	author = {{Angr Team}},
	url = {https://docs.angr.io/},
	year = {2024},
	note = {Accessed: 2025-06-28}
}
