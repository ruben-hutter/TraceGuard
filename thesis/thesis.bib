% FOUNDATIONAL SYMBOLIC EXECUTION PAPERS

% Main symbolic execution survey - highly authoritative
@article{baldoni_survey_2018,
	title = {A Survey of Symbolic Execution Techniques},
	journal = {ACM Computing Surveys},
	author = {Baldoni, Roberto and Coppa, Emilio and D'elia, Daniele Cono and Demetrescu, Camil and Finocchi, Irene},
	year = {2018},
	volume = {51},
	number = {3},
	pages = {50:1--50:39},
	doi = {10.1145/3182657}
}

% Original symbolic execution paper
@article{king_symbolic_1976,
	title = {Symbolic Execution and Program Testing},
	journal = {Communications of the ACM},
	author = {King, James C.},
	year = {1976},
	volume = {19},
	number = {7},
	pages = {385--394},
	doi = {10.1145/360248.360252}
}

% Classic overview paper - very well cited
@inproceedings{schwartz_all_2010,
	title = {All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (But Might Have Been Afraid to Ask)},
	booktitle = {2010 IEEE Symposium on Security and Privacy},
	publisher = {IEEE},
	author = {Schwartz, Edward J. and Avgerinos, Thanassis and Brumley, David},
	year = {2010},
	pages = {317--331},
	doi = {10.1109/SP.2010.26}
}

% SYMBOLIC EXECUTION FRAMEWORKS

% KLEE - most prominent tool
@inproceedings{cadar_klee_2008,
	title = {{KLEE}: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs},
	booktitle = {8th USENIX Symposium on Operating Systems Design and Implementation},
	publisher = {USENIX Association},
	author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
	year = {2008},
	pages = {209--224}
}

% SAGE - Microsoft's whitebox fuzzing
@inproceedings{godefroid_automated_2008,
	title = {Automated Whitebox Fuzz Testing},
	booktitle = {Network and Distributed System Security Symposium},
	publisher = {Internet Society},
	author = {Godefroid, Patrice and Levin, Michael Y. and Molnar, David A.},
	year = {2008}
}

% Java PathFinder
@inproceedings{visser_model_2003,
	title = {Model Checking Programs},
	booktitle = {Automated Software Engineering},
	publisher = {IEEE},
	author = {Visser, Willem and Havelund, Klaus and Brat, Guillaume and Park, SeungJoon and Lerda, Flavio},
	year = {2003},
	pages = {3--12}
}

% CBMC bounded model checker
@inproceedings{clarke_behavioral_2003,
	title = {Behavioral Consistency of {C} and {Verilog} Programs Using Bounded Model Checking},
	booktitle = {Proceedings of the 40th Annual Design Automation Conference},
	publisher = {ACM},
	author = {Clarke, Edmund and Kroening, Daniel and Yorav, Karen},
	year = {2003},
	pages = {368--371}
}

% OPTIMIZATION TECHNIQUES

% State merging optimization
@inproceedings{kuznetsov_efficient_2012,
	title = {Efficient State Merging in Symbolic Execution},
	booktitle = {Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation},
	publisher = {ACM},
	author = {Kuznetsov, Vitaly and Kinder, Johannes and Bucur, Stefan and Candea, George},
	year = {2012},
	pages = {193--204},
	series = {PLDI '12}
}

% Veritesting approach
@inproceedings{avgerinos_enhancing_2014,
	title = {Enhancing Symbolic Execution with Veritesting},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	publisher = {ACM},
	author = {Avgerinos, Thanassis and Rebert, Alexandre and Cha, Sang Kil and Brumley, David},
	year = {2014},
	pages = {1083--1094}
}

% Compilation-based symbolic execution
@inproceedings{poeplau_symbolic_2020,
	title = {Symbolic Execution with {SymCC}: Don't Interpret, Compile!},
	booktitle = {29th USENIX Security Symposium},
	publisher = {USENIX Association},
	author = {Poeplau, Sebastian and Francillon, Aur√©lien},
	year = {2020},
	pages = {181--198}
}

% TAINT ANALYSIS

% Pipelined taint analysis integration
@inproceedings{ming_taintpipe_2015,
	title = {{TaintPipe}: Pipelined Symbolic Taint Analysis},
	booktitle = {24th USENIX Security Symposium},
	publisher = {USENIX Association},
	author = {Ming, Jiang and Wu, Dinghao and Wang, Jun and Xing, Xinyu and Liu, Zhiqiang},
	year = {2015},
	pages = {65--80}
}

% Classic taint analysis paper
@inproceedings{newsome_dynamic_2005,
	title = {Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software},
	booktitle = {Network and Distributed System Security Symposium},
	publisher = {Internet Society},
	author = {Newsome, James and Song, Dawn},
	year = {2005}
}

% ANGR FRAMEWORK

% Main angr paper - SoK overview
@inproceedings{shoshitaishvili_sok_2016,
	title = {{SoK}: (State of) The Art of War: Offensive Techniques in Binary Analysis},
	booktitle = {IEEE Symposium on Security and Privacy},
	publisher = {IEEE},
	author = {Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and Stephens, Nick and Polino, Mario and Dutcher, Audrey and Grosen, John and Feng, Siji and Hauser, Christophe and Kruegel, Christopher and Vigna, Giovanni},
	year = {2016},
	pages = {138--153}
}

% Angr educational paper
@inproceedings{springer_teaching_2018,
	title = {Teaching with Angr: A Symbolic Execution Curriculum and {CTF}},
	booktitle = {2018 IEEE/ACM 1st International Workshop on Automated Software Engineering Education},
	publisher = {IEEE},
	author = {Springer, Jake and Feng, Siji},
	year = {2018},
	pages = {13--20}
}

% HYBRID APPROACHES

% Driller - combines fuzzing and symbolic execution
@inproceedings{stephens_driller_2016,
	title = {Driller: Augmenting Fuzzing Through Selective Symbolic Execution},
	booktitle = {Network and Distributed System Security Symposium},
	publisher = {Internet Society},
	author = {Stephens, Nick and Grosen, John and Salls, Christopher and Dutcher, Audrey and Wang, Ruoyu and Corbetta, Jacopo and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
	year = {2016}
}

% ONLINE RESOURCES (keep minimal)

% Angr documentation - general reference
@misc{angr_documentation,
	title = {Angr Documentation},
	author = {{Angr Team}},
	url = {https://docs.angr.io/},
	year = {2024},
	note = {Accessed: 2025-06-28}
}
